#!/usr/bin/env python3
# -*- coding: utf8 -*-
from __future__ import print_function
import argparse
import errno
import os
from pathlib import Path
import re
import sys
import platform
import shutil


# Monkey-patch argparse so that we can have a default subparse
# Source: # https://stackoverflow.com/questions/6365601/
#       default-sub-command-or-handling-no-sub-command-with-argparse
def set_default_subparser(self, name, args=None):
    """default subparser selection. Call after setup, just before parse_args()
    name: is the name of the subparser to call by default
    args: if set is the argument list handed to parse_args()

    , tested with 2.7, 3.2, 3.3, 3.4
    it works with 2.6 assuming argparse is installed
    """
    subparser_found = False
    for arg in sys.argv[1:]:
        if arg in ['-h', '--help']:  # global help if no subparser
            break
    else:
        for x in self._subparsers._actions:
            if not isinstance(x, argparse._SubParsersAction):
                continue
            for sp_name in x._name_parser_map.keys():
                if sp_name in sys.argv[1:]:
                    subparser_found = True
        if not subparser_found:
            # insert default in first position, this implies no
            # global options without a sub_parsers specified
            if args is None:
                sys.argv.insert(1, name)
            else:
                args.insert(0, name)

argparse.ArgumentParser.set_default_subparser = set_default_subparser

IGNORE_DIRS = ['.git']
IGNORE_FILENAMES = ['.git']
IGNORE_SUFFIXES = ['.swp']
SOURCE_DEFAULT = os.path.expanduser('~/dotfiles')
SOURCE_OVERRIDE = os.path.expanduser('~/.simpledot')
RE_DOTFILE = re.compile('dotfile\s+@\s+(.*)')

COLOR_PREFIX = '\033['
COLOR_RED = '31m'
COLOR_GREEN = '32m'
COLOR_YELLOW = '33m'
COLOR_RESET = '0m'


def is_windows():
    return platform.system().lower() == 'windows'


def color_supported():
    return not is_windows()


def colorize(s, color=None):
    if not color_supported() or not color:
        return s

    constname = 'COLOR_{}'.format(color.upper())
    try:
        color = globals()[constname]
    except KeyError:
        print("error: unknown color '{}'".format(color), file=sys.stderr)
        return s

    return u''.join([COLOR_PREFIX, color, s, COLOR_PREFIX, COLOR_RESET])


def fancy_chars_supported():
    return not is_windows()


def checkmark(checked):
    char = '[X]' if checked else '[ ]'
    if fancy_chars_supported():
        char = u'✓' if checked else u'✗'
    color = 'green' if checked else 'red'
    return colorize(char, color=color)


def rightarrow():
    return '➦' if fancy_chars_supported() else '->'


def warn(s):
    print(colorize(u"warning: {}".format(s), color='yellow'),
          file=sys.stderr)


def can_symlink():
    return not is_windows()


def get_srcdir():
    srcdir = SOURCE_DEFAULT
    if os.path.exists(SOURCE_OVERRIDE):
        with open(SOURCE_OVERRIDE) as f:
            srcdir = f.read()
    if not os.path.exists(srcdir):
        sys.exit("error: no sources, first use 'source' to add a directory")
    return srcdir


def cmd_source(args):
    path = os.path.expanduser(args.path)
    path = os.path.abspath(path)
    if not os.path.exists(path):
        sys.exit("error: '{}' not found".format(path))

    srcdir = SOURCE_OVERRIDE

    if os.path.exists(srcdir):
        sys.exit("error: '{}' already exists, delete it if you'd like to add"
                 " a different source".format(srcdir))

    with open(srcdir, 'w') as f:
        f.write(path)


def read_annotation(src, filename):
    dst = None
    with open(src, encoding="utf8") as f:
        match = RE_DOTFILE.search(f.read())
        if match:
            dst =  match.group(1).strip()
        elif filename.startswith('.'):
            # Files starting with a dot get a default annotation if
            # one is missing
            dst = os.path.join('~', filename)
        if dst:
            dst = os.path.expanduser(dst)
    return dst


def get_profile_from_path(path):
    ps = Path(path).parts
    i = ps.index('profiles')
    try:
        profile = ps[i + 1]
    except IndexError:
        profile = 'default'
    return profile


def guess_current_profile():
    """
    We don't want to have to supply --profile for the 'down' command, we just
    want it to do the correct thing.

    To do this, the 'down' command needs to know which profile it was
    originally run with so it can properly unlink everything.

    To do this, it scans the existing symlinks looking for one that symlinks
    into a 'profiles' directory. The first one it finds is considered the
    profile. If it finds none, then 'default' is assumed.
    """
    profile = 'default'
    for p, anns in annotations_by_profile().items():
        if p == 'default':
            continue
        for dst, src in anns.items():
            if not os.path.islink(dst):
                continue
            realdst = os.path.realpath(dst)
            if src == realdst:
                profile = p
                break
    return profile


def yield_annotations():
    profile = 'default'
    srcdir = get_srcdir()
    profdir = os.path.join(srcdir, 'profiles')
    for root, dirnames, filenames in os.walk(srcdir, topdown=True):
        # In-place modify dirnames to tell `walk()` to skip these directories
        # Requires `topdown=True` to work.
        for dirname in IGNORE_DIRS:
            try:
                dirnames.remove(dirname)
            except ValueError:
                pass  # Not found
        for fname in IGNORE_FILENAMES:
            try:
                filenames.remove(fname)
            except ValueError:
                pass  # Not found
        if root.startswith(profdir):
            profile = get_profile_from_path(root)
        for filename in filenames:
            ignore = False
            for suffix in IGNORE_SUFFIXES:
                if filename.endswith(suffix):
                    ignore = True
                    break
            if ignore:
                continue
            src = os.path.join(root, filename)
            dst = read_annotation(src, filename)
            if dst:
                yield src, dst, profile


def annotations_by_profile():
    d = {}
    for src, dst, profile in yield_annotations():
        x = d.setdefault(profile, {})
        x[dst] = src
    return d


def annotations_for_profile(profile):
    d = annotations_by_profile()
    x = d.get('default', {})
    y = d.get(profile, {})
    x.update(y)
    return x


def annotations_for_current_profile():
    cur = guess_current_profile()
    return annotations_for_profile(cur)


def cmd_list(args):
    srcdir = get_srcdir()
    print("Source: {}\n".format(srcdir))

    userpath = os.path.expanduser('~')

    anns = [(s, d) for d, s in annotations_for_current_profile().items()]
    anns.sort()

    # Compute longest left-hand-side of ->
    max_srclen = 0
    for src, _ in anns:
        relsrc = os.path.relpath(src, srcdir)
        if len(relsrc) > max_srclen:
            max_srclen = len(relsrc)

    for src, dst in anns:
        relsrc = os.path.relpath(src, srcdir)

        if dst.startswith(userpath):
            shortdst = '~/{}'.format(dst.lstrip(userpath))

        msg = None
        if not os.path.exists(dst):
            msg = 'not found'
        elif not os.path.islink(dst):
            msg = 'not a symlink'

        parts = [
            checkmark(msg is None),
            relsrc.ljust(max_srclen),
            rightarrow(),
            shortdst,
        ]

        if msg:
            msg = colorize('({})'.format(msg), color='yellow')
            parts.append(msg)

        print(u' '.join(parts))


def validate_profile(profile):
    if profile == 'default':
        return
    srcdir = get_srcdir()
    path = os.path.join(srcdir, 'profiles', profile)
    if not os.path.exists(path):
        sys.exit(f"profile '{profile}' not found")


def cmd_up(args):
    validate_profile(args.profile)
    anns = annotations_for_profile(args.profile)
    for dst, src in anns.items():
        if not os.path.exists(src):
            warn("source file '{}' does not exist".format(src))
            continue
        if os.path.islink(src):
            warn("source file '{}' is a symbolic link".format(src))
            continue
        if os.path.exists(dst):
            warn("'{}' already exists".format(dst))
            continue

        dst_dirname = os.path.dirname(dst)
        try:
            os.makedirs(dst_dirname)
        except OSError as e:
            if e.errno != errno.EEXIST:
                raise

        if can_symlink():
            os.symlink(src, dst)
        else:
            shutil.copyfile(src, dst)


def cmd_down(args):
    anns = annotations_for_current_profile()
    for dst, src in anns.items():
        if not os.path.lexists(dst):
            warn("'{}' does not exist".format(dst))
            continue
        if not os.path.islink(dst) and can_symlink():
            warn("'{}' is not a symbolic link".format(dst))
            continue
        os.unlink(dst)


def main():
    parser = argparse.ArgumentParser()
    subparsers = parser.add_subparsers()

    source_parser = subparsers.add_parser('list')
    source_parser.set_defaults(func=cmd_list)

    source_parser = subparsers.add_parser('source')
    source_parser.add_argument('path')
    source_parser.set_defaults(func=cmd_source)

    source_parser = subparsers.add_parser('up')
    source_parser.add_argument('-p', '--profile', default='default')
    source_parser.set_defaults(func=cmd_up)

    source_parser = subparsers.add_parser('down')
    source_parser.set_defaults(func=cmd_down)

    parser.set_default_subparser('list')

    args = parser.parse_args()
    return args.func(args)


if __name__ == '__main__':
    main()
